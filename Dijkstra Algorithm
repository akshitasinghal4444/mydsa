Given a weighted, undirected and connected graph of V vertices and an adjacency list adj where adj[i] is a list of lists containing two integers where the first integer of each list j denotes there is edge between i and j , second integers corresponds to the weight of that  edge . You are given the source vertex S and You to Find the shortest distance of all the vertex's from the source vertex S. You have to return a list of integers denoting shortest distance between each node and Source vertex S.

    vector <int> dijkstra(int n, vector<vector<int>> a[], int s)
    {
        // Code here
        vector <int> dis(n,INT_MAX);
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;
        vector<bool> vis(n,0);
        
        q.push({0,s});

        while(!q.empty())
        {
            s=q.top().second;
            int d=q.top().first;
            q.pop();
            
            if(vis[s])
            continue;
            
            vis[s]=1;
            dis[s]=min(dis[s],d);
            
            for(auto v:a[s])
            {
                if(dis[v[0]]<=d+v[1])
                continue;
                
                dis[v[0]]=d+v[1];
                q.push({dis[v[0]],v[0]});
            }
        }
        
        return dis;
    }
